html {
    box-sizing: border-box;
    font-size: 16px;
    font-family: sans-serif;
    scroll-behavior: smooth;
  }

  *,
  *::after,
  *::before {
    box-sizing: inherit;
  }

  a[href="#top"] {
    margin: 1rem;
    display: block;
    font-size: 2rem;
    text-align: center;
    text-decoration: none;
  }

  p {
    margin: 0;
  }

  h2 {
    margin-top: 50vh;
    text-align: center;
  }

  img {
    margin: auto;
    display: block;
    max-width: 100%;
    height: auto;
  }

  .menu {
    margin-bottom: 100vh;
    font-size: 125%;
  }

  .menu li {
    margin-bottom: 1rem;
  }

  .container {
    margin: 0 auto;
    width: 80%;
    height: 80vh;
    background-color: #222;
    border: medium solid #000;
  }

  .item {
    padding: 1rem;
    font-size: 1.25rem;
    background-color: #666;
    border: medium solid #999;
  }
  /* Grid Explicito */
  .grid-explicit{
    /* ativamos el grid con el display */
    display: grid;
    /* para ativar las culunas y filas usamos grid-template-column y grid-template-row que pueder reciber como valor de medida tanto %, px , rem y fr(fraciones) */
    /* Esta es una grid de (3c x 3r) */
    grid-template-rows: 2rem 20vh 30%;
    grid-template-columns: 50% 100px 1fr;

    /* para formar una quadricula mais rapidamente usamos la function repeat()que recibe com primer paramentro el numero neste caso de columnas y como el segundo el tamaño que tendera estas colunas  */
    /* esta es una grid de(5c x 4r) */
    grid-template-columns: repeat(5,20%);
    grid-template-rows: repeat(4,25%);
        /* intercanbiar auto/25% */
    grid-template-rows: repeat(4,auto);
    /* la fr(fracion) dive las filas y colunas en proporciones iguales, pero repeta el contenido del item */
    grid-template-columns: repeat(5,1fr);
    grid-template-rows: repeat(4,1fr);

    /* podemos usar el reater para definer en medio de otras medidas */
    /* Grid de (4c x 5r) */
    grid-template-columns:20% repeat(2,30%) 20%;
    grid-template-rows:repeat(5,auto);

    /* Tenemos las propriedade row-gap y column-gap que tiene como shorthand gap: para colocarmos espacios ente colunas y filar, seria como un margin dentro de grid */
    column-gap: 1rem;
    row-gap: 2px;
    /* gap: row column */
    gap: 1vh 1vw;
    gap:0%;
  }

  .grid-explicit .item:nth-child(10){
   background-color: lightgray;
    /* El grid-row-start y end funcina para posicionar un elemento paseado en las lineas de la grid, a igual que el grid-column-start y end  */
    grid-row-start:2;
    grid-row-end: 3;
    grid-column-start: 2;
    grid-column-end: 3;
    /* el shorcort de estas propriedade es grid-row y  grid-column */
    
    grid-row: 2/3;
    grid-column: 3/5;

    /* el shorthand de las dos propriedades seria grid-area que empieza com grid-row y despues seria el column */
    grid-area:2/3/3/5;
  }
  .grid-explicit .item:nth-child(12){
    background-color: lightgreen;
    /* usamos la palavra span para referirnos al lugar que se encontra el elemento selecionado hasta donde queremos que ocupe, lo podemos usar con grid-row y grid-column */
    grid-row: span 2;
    grid-column: span 2;
  }
  .grid-explicit .item:nth-child(15){
    /* lo podemos indicar lo posicion de comiezo ante de mandale espandir */
    grid-row:1/ span 2;
    grid-column:1/span 2;
  }
  /* quadricula 3x3 */
  .grid-line-names{
    display: grid;
    grid-template-rows:repeat(3,1fr);
    grid-template-columns: repeat(3,1fr);
    /* Tenemos aqui una grid de 3x3 que seria 4 lineas x 4 lineas */
    /* Para nombrar las lineas, los hacamos al invocar el grid-template y usamos los []*/
    /* no se usa  " , " entre las criaciones de lineas  */
    grid-template-columns: [linea-c1] 1fr [linea-c2] 1fr[linea-c3] 1fr [linea-c4];
    grid-template-rows: [linea-r1] auto [linea-r2] auto[linea-r3] auto  [linea-r4];

  }

  .grid-line-names .item:nth-child(3){
    color: cyan;
    /* para expandir los item usamos o grid-row, grid-column, asignando el nombre de las lineas*/

    grid-row: linea-r3/linea-r4;
    grid-column: linea-c1/linea-c4;

    /* el atajo grid-area no funciona con grids nomeados */
    /* grid-area: No funciona ; */
  }

  .grid-areas{
    display: grid;
    grid-template-columns: 1fr 200px;
    grid-template-rows: 100px repeat(2, 1fr) 60px;
    /* se pode definir las ares en una sola linea pero para que quede mejor en leitura los ideal es criar las areas individualmente */
    grid-template-areas:/* "header header" "content aside" "footer footer" estos es todo en una linea*/
      "header header"   /* esto es criarlo individualmente*/
      "content asidebar"
      "content ." /* Para dejar una area vacia usamos el . en la asgnacion de la area*/
      "footer footer"
      ;
  }

  /* Despues de habelos criados en el grid-template-areas , asignamos las areas criadas a las class a la cual queremos asignar las, con sus respectivos nombres */
  .header{
    /* la areas header ocupando 2 column y una row*/
    grid-area: header;
  }
  .content{
    /* Content ocupando una 1 column y 1 row */
    grid-area: content;
  }
  .asidebar{
    /* asidebar ocupando 1 column y 1 row */
    grid-area: asidebar;
  }
  .footer{
    /* footer ocupando 2 column y 1 row */
    grid-area: footer;
  }
  .grid-implicit{
    display: grid;
    /* grid 4c x 3r */
    grid-template-columns: repeat(4,1fr);
    grid-template-rows: repeat(3,200px);
    /* aqui tenemos una grid de 4 x 3 = 12, pero como nuestro contener aberga 19 item lo sobrante seria 7 item estos item no estariam en la definicion de column/row de la grid, lo que serian grid implicita */
  }

  .grid-flow{
    display: grid;
    /* Grid 5c x 3r */
    grid-template-columns: repeat(5,1fr);
    grid-template-rows:repeat(3,150px);

    /* El grid-auto-flow cambia el flujo de la grid , su valor por defecto es row, pero tambien le podemos asignar column, */
    grid-auto-flow:row;
    grid-auto-flow: column;

    /* la propriedad grid-auto-rows es la que usamos para asignar a los elementos que esta inplicitos a la grid un ancho y si usamos el grid-auto-columns asignamos a los elemetos implicitos de la grid una altura, el valor poder defecto es auto*/
    grid-auto-rows: 100px;
    grid-auto-columns: auto;
  }

  .grid-flow-dense{
    display: grid;
    /* Grid 5c X 4r */
    grid-template-columns: repeat(5,1fr);
    grid-template-rows: repeat(4,150px);
    /* al adicionar "dense" en la direcion de las grid en grid-auto-flow, se puede decir que se hace un cambio en el algoritimo de la grid para que se hay espacios vacio las grid se encaje en ellos  */
    grid-auto-flow: row dense ;
    grid-auto-flow:column dense;
  }

  .grid-flow-dense .item:nth-child(11){
    color: cyan;
    grid-row:span 3;
    grid-column:span 3;
  }

  .grid-layers{
    display: grid;
    /* Grid 4c x 4r */
    grid-template-columns: repeat(4,1fr);
    grid-template-rows: repeat(4,1fr);
  }

  .grid-layers .item:nth-child(1){
    background-color: yellow;
    grid-row: 1/3;
    grid-column: 1/3;
  }
  .grid-layers .item:nth-child(2){
    background-color: blue;
    grid-row: 1/3;
    grid-column: 3/5;
  }
  .grid-layers .item:nth-child(3){
    background-color:green;
    grid-row: 3/5;
    grid-column: 1/3;
  }
  .grid-layers .item:nth-child(4){
    background-color:rgb(255, 98, 0);
    grid-row: 3/5;
    grid-column: 3/5;
  }
  .grid-layers .item:nth-child(5){
    background-color: purple;
    opacity:.75;
    grid-row: 2/4;
    grid-column: 2/4;
  }
  .grid-order{
    display: grid;
    /* Grid 3c x 2r */
    grid-template-columns: repeat(3,1fr);
    grid-template-rows: repeat(2,1fr);
  }

  .grid-order .item:nth-child(1){
    /* Para cambiar las ordenes de los item en grid usamos la misma propriedad que se usa el flex " ORDER" Y como el flex su valor por defecto es 0 , acepta tanto valores positivos como negativos, la orde sera respetada como un z-index el numero maior sempre delante*/
    order: 1;

  }
  .grid-order .item:nth-child(2){
    order: 2;
  }
  .grid-order .item:nth-child(5){
    order: -1;
  }

  .grid-align{
    display: grid;
    /* Grid 3c x 2r */
    grid-template-columns: repeat(3,200px);
    grid-template-rows: repeat(2,200px);
    /* Para aliniear los items en el box grid usamos la propriedad justify-items que tiene como valor por defecto stretch(estirar), lo alinear en eje X = Horizontal*/
    justify-items: stretch;
    justify-items: start;
    /* Para alinear los item en direcciono eje Y = vertical usamos la propriedad align-item, que tiene como valor defecto stretch */
    align-items: end;
  }

  .grid-align .item:nth-child(4){
    /* Para alinear un item en especifico usamos el justify-self para el eje X */
    justify-self: start;

    /* y el align-self para el eje Y */
    align-self: start;
  }

  .grid-align-tracks{
    display: grid;
    /* Grid 3c x 2r */
    grid-template-columns: repeat(3,200px);
    grid-template-rows: repeat(2,200px);
    /* Para alinear los tracks de la grid, usamos el justify-content, lo que lo alinea en el eje X = HORIZONTAL*/
    justify-content: end;
    /* Para alinear los tracks en el eje Y = VERTICAL usamos el align-Content */
    align-content: end;
  }

  .grid-min-max{
    display: grid;
    /* Grid 4c x ? */
    grid-template-columns: repeat(4,1fr);
    /*La grid nos a traido alem de las fraciones (fr) como unidad de medida nueva , tbm a traio la propriedad minmax() para definir el valor minimo y maximo que puede tener nuestro elementos grid */
    grid-template-columns: repeat(4,minmax(100px,200px));
    /* otro adicionar que a llegado con grid son los valores constante min-content y max-content */

    /* el min-content especifica que el item va diminuir hasta el minimo del contenido dentro del item */
    grid-template-columns: repeat(4,minmax(min-content,200px));
    grid-template-columns: repeat(4,minmax(100px,min-content));
    /* el max-content solo deja el item creser al tamaño del contenido*/
    grid-template-columns: repeat(4,minmax(max-content,200px));
    grid-template-columns: repeat(4,minmax(min-content,max-content));

  }
  .grid-repeat{
    display: grid;
    /* Grid 4c x 4r */
    /* podemos usar la fuction repeat para especificar repeticiones de row y column iguales, Importante la esta fuction repeat solo puede ser utilizada em los grid-templates-rows y columns */
    grid-template-columns: repeat(4,10% 20% 30% 40%);grid-template-columns: repeat(2,10% 20% 30% 40%);
    grid-template-columns: repeat(1,10% 20% 30% 40%);
    grid-template-rows: repeat(2,200px 100px);
  }